# This workflow is triggered by another workflow

name: 'Terraform Apply'
#on: [workflow_call]

# Uncomment for manual run of this Terraform Plan workflow
on: [workflow_call]

jobs:
  deploy-to-azure:
    name: 'Deploy to Azure'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest

    steps:

      # Address pull_request event (in which case the $GITHUB_REF contains something not useful like refs/pull/4/merge)
      # Obtaining the target branch of the pull request: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # We will extract only the branch name of stg or Main without the refs/heads/ so we can define which steps to run
      - name: Get branch name
        run: echo "::set-output name=branch::${GITHUB_BASE_REF#refs/heads/}"
        id: branch_check

      # Echo the branch name that was extracted and will be worked on in a way that another job
      - run: echo Working on ${{ steps.branch_check.outputs.branch }} branch

      - name: Checkout GitHub Actions
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.0.9
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: |
          terraform fmt -check
        working-directory: './Infrastructure'



# Terraform Init, Validate, Plan, and Apply Main Environment
      - name: Terraform Main Init
        id: tf_init_Main
        run: |
          terraform init \
            -reconfigure \
            -backend-config="storage_account_name=${{ secrets.Main_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.Main_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.Main_STORAGE_ACCESS_KEY }}"
        if: steps.branch_check.outputs.branch == 'Main' # This defines how the step will only run if the branch name is Main
        working-directory: '/infrastructure'

 # This terraform init will use a preconfigured Azure storage account to store the tfstate

      - name: Terraform Main Validate
        id: tf_validate_Main
        run: |
          terraform validate -no-color
        if: steps.branch_check.outputs.branch == 'Main' # This defines how the step will only run if the branch name is Main
        working-directory: '/infrastructure'



      - name: Terraform Main Plan
        id: tf_plan_Main
        run: |
          export TF_VAR_client_id=${{ secrets.Main_ARM_CLIENT_ID }}
          export TF_VAR_client_secret=${{ secrets.Main_ARM_CLIENT_SECRET }}
          export TF_VAR_tenant_id=${{ secrets.Main_ARM_TENANT_ID }}
          export TF_VAR_subscription_id=${{ secrets.Main_ARM_SUBSCRIPTION_ID }}
          export TF_VAR_admin_login=${{ secrets.Main_PSQL_ADMINISTRATOR_LOGIN_PASSWORD }}
          export TF_VAR_administrator_login_password=${{ secrets.Main_PSQL_ADMIN_LOGIN }}
          terraform plan --var-file=terraform-Main.tfvars -no-color -out=plan.tfdata
        if: steps.branch_check.outputs.branch == 'Main' # This defines how the step will only run if the branch name is Main
        working-directory: '/infrastructure'

 # This terraform plan exports the GitHub secrets and uses TF_VAR so the terraform files can use the variable values. The plan is also output to plan.tfdata for apply later

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.tfdata # Use the previous terraform plan output to apply
        if: steps.branch_check.outputs.branch == 'Main' # This defines how the step will only run if the branch name is Main
        working-directory: '/infrastructure'

